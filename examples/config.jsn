{
	// relative paths to tool locations, you can add more binaries in here
	tools<mac>: 
	{
		premake: "../bin/premake5"
		texturec: "../bin/texturec"
		pmfx: "python3 ../bin/pmfx-shader/build_pmfx.py"
		ffmpeg: "ffmpeg"
		jsn: "../scripts/jsn/jsn"
	}
	
	// use <mac> <windows> or <linux> to specify objects for the specific platform
	tools<windows>: 
	{
		premake: "../bin/premake5.exe"
		texturec: "../bin/texturec.exe"
		pmfx: "py -3 ../bin/pmfx-shader/build_pmfx.py"
		ffmpeg: "ffmpeg.exe"
		jsn: "../scripts/jsn/jsn"
	}
	
	// register extension python modules
	extensions:
	{
		ext_test:
		{
			module: "ext",
			function: "ext_test_function"
		}
	}
	
	// base is common for all platforms
	base:
	{
		copy-base:
		{
			type: copy
			files: [
				["assets/folder", "bin/folder"]
			]
		}
		
		copy-wildcards:
		{
			type: copy
			files: [
				["assets/random_files/*.txt", "bin/text_files"]
				["assets/random_files/*.json", "bin/json_files"]
				["assets/random_files/*.xml", "bin/xml_files"]
			]
		}
		
		copy-regex:
		{
			type: copy
			files: [
				{
					match: '^.+?matchfile\\.(.*)'
					directory: "assets"
					sub: [
						["assets/regex", "bin/regout"]
						[".txt", ".newext"]
					]
				}
			] 
		},
		
		clean:
		{
			directories: [
				"build"
				"bin"
			]
		}
		
		jsn:
		{
			files: [
				["assets/configs/*.jsn", "bin/configs"]
			]
			
			args: [
				"-i %{input_file} -o %{output_file} -p"
			]
			
			dependencies: true
		}
	}
	
	// mac inherits from base and then specialises for this platform
	mac(base):
	{		
		shell: 
		{
			commands: [ 
				"echo hello_world"
				"ls"
				"pwd"
				"git status"
			]
		}
		
		connect_server:
		{
			type: connect
			address: "server.lan"
			mount: "third_party_libs"
			credentials: "TVShareReadOnly"
		}
		
		texturec:
		{
			args: [
				"-f %{input_file}"
				"%{export_args}"
				"-o %{output_file}"
			]
			
			files: [
				["assets/textures/**/*.*", "bin/textures"]
			]
			
			excludes: [
				"export.jsn",
				"*.txt"
			]
			
			change_ext: ".dds"
			dependencies: true
		}
		
		pmfx:
		{
			args: [
				"-platform osx"
				"-shader_platform metal"
				"-shader_version 2.1"
				"-i assets/shaders"
				"-o bin/shaders/metal"
				"-h shader_structs"
				"-t temp/metal"
            ]
		}
	}
	
	videos:
	{
		ffmpeg:
		{
			type: ffmpeg
			
			args: [
				"-i %{input_file}"
				"%{export_args}"
				"%{output_file}"
			],
			
			change_ext: ".mp4"
			dependencies: true
		}
		
		x265-1080(ffmpeg):
		{
			files: [
				["assets/videos/**/*.mp4", "bin/videos/x265_1080"]
				["assets/videos/**/*.webm", "bin/videos/x265_1080"]
			]
		}
		
		x265-720(ffmpeg):
		{		
			files: [
				["assets/videos/**/*.mp4", "bin/videos/x265_720"]
				["assets/videos/**/*.webm", "bin/videos/x265_720"]
			]
		}
	
		x264-480(ffmpeg):
		{		
			files: [
				["assets/videos/**/*.mp4", "bin/videos/x264_480"]
				["assets/videos/**/*.webm", "bin/videos/x264_480"]
			]
		}
	}
}